#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1500  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>

&mmv_input_listener { input-processors = <&zip_temp_layer 2 2000>; };

&msc_input_listener { input-processors = <&zip_temp_layer 2 2000>; };

&mmv {
    acceleration-exponent = <1>;      // 1
    time-to-max-speed-ms = <500>;     // 300
    delay-ms = <0>;                   // 0
};

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <40>;      // 300
    delay-ms = <0>;                   // 0
};

/ {
    behaviors {
        hrl: homerow_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_LAYER";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
        };

        osm: osm {
            compatible = "zmk,behavior-sticky-key";
            label = "OSM";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <1000>;
            quick-release;
            ignore-modifiers;
        };

        bsp_del: bsp_del {
            compatible = "zmk,behavior-mod-morph";
            label = "BSP_DEL";
            bindings = <&kp BSPC>, <&kp DEL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ctrl_tab: ctrl_tab {
            compatible = "zmk,behavior-mod-morph";
            label = "CTRL_TAB";
            bindings = <&m_hold_mod_press_key LCTRL TAB>, <&kp TAB>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
            keep-mods = <(MOD_LCTL)>;
        };

        alt_tab: alt_tab {
            compatible = "zmk,behavior-mod-morph";
            label = "ALT_TAB";
            bindings = <&m_hold_mod_press_key LALT TAB>, <&kp TAB>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
            keep-mods = <(MOD_LALT)>;
        };

        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick-tap-ms = <150>;
            flavor = "balanced";
            require-prior-idle-ms = <125>;
        };
    };

    macros {
        switch_lng_meta_spc: switch_lng_meta_spc {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_META>,
                <&macro_tap>,
                <&kp SPACE>,
                <&macro_wait_time 50>,
                <&macro_release>,
                <&kp LEFT_META>;

            label = "SWITCH_LNG_META_SPC";
        };

        switch_lng_shft_alt: switch_lng_shft_alt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LSHIFT>,
                <&macro_tap>,
                <&kp LALT>,
                <&macro_wait_time 50>,
                <&macro_release>,
                <&kp LSHIFT>;

            label = "SWITCH_LNG_SHFT_ALT";
        };

        m_hold_mod_press_key: m_hold_mod_press_key {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&macro_param_2to1 &kp MACRO_PLACEHOLDER>;

            label = "M_HOLD_MOD_PRESS_KEY";
        };

        la: la {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_tap>,
                <&kp 0>,
                <&macro_press>,
                <&macro_param_1to1 &mo MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &mo MACRO_PLACEHOLDER &kp LCTRL &kp LSHFT &kp LALT &kp LGUI>;

            label = "LA";
        };
    };

    combos {
        compatible = "zmk,combos";

        c_capswords {
            bindings = <&caps_word>;
            key-positions = <38 39>;
            layers = <0>;
            timeout-ms = <50>;
        };

        c_esc {
            bindings = <&kp ESC>;
            key-positions = <2 3>;
            layers = <0>;
        };

        c_bspc {
            bindings = <&bsp_del>;
            key-positions = <8 7>;
            layers = <0 1 2 3>;
        };

        c_tg_l_mouse {
            bindings = <&tog 5>;
            key-positions = <25 34>;
            layers = <0 5>;
        };

        c_enter {
            bindings = <&kp RET>;
            key-positions = <4 3>;
            layers = <0 1 2 3>;
        };

        c_tab {
            bindings = <&kp TAB>;
            key-positions = <8 9>;
            layers = <0>;
        };

        c_sqt {
            bindings = <&kp SQT>;
            key-positions = <6 7>;
            layers = <0 2 3>;
        };

        c_grave {
            bindings = <&kp GRAVE>;
            key-positions = <4 5>;
            layers = <0 2 3>;
        };

        c_brace {
            bindings = <&kp LBKT>;
            key-positions = <16 17>;
            layers = <0 2 3>;
        };

        c_rbkt {
            bindings = <&kp RBKT>;
            key-positions = <18 19>;
            layers = <0 2 3>;
        };

        c_lpar {
            bindings = <&kp LPAR>;
            key-positions = <15 16>;
            layers = <0 2 3>;
        };

        c_rpar {
            bindings = <&kp RPAR>;
            key-positions = <19 20>;
            layers = <0 2 3>;
        };

        c_lbrc {
            bindings = <&kp LBRC>;
            key-positions = <28 29>;
            layers = <0 2 3>;
        };

        c_rbrc {
            bindings = <&kp RBRC>;
            key-positions = <30 31>;
            layers = <0 2 3>;
        };

        c_caret {
            bindings = <&kp CARET>;
            key-positions = <5 17>;
            layers = <0 2 3>;
        };

        c_dllr {
            bindings = <&kp DLLR>;
            key-positions = <6 18>;
            layers = <0 2 3>;
        };

        c_excl {
            bindings = <&kp EXCL>;
            key-positions = <4 16>;
            layers = <0 2 3>;
        };

        c_qmark {
            bindings = <&kp QMARK>;
            key-positions = <7 19>;
            layers = <0 2 3>;
        };

        c_under {
            bindings = <&kp UNDER>;
            key-positions = <27 28>;
            layers = <0 2 3>;
        };

        c_minus {
            bindings = <&kp MINUS>;
            key-positions = <32 31>;
            layers = <0 2 3>;
        };

        c_amps {
            bindings = <&kp AMPS>;
            key-positions = <3 15>;
            layers = <0 2 3>;
        };

        c_pipe {
            bindings = <&kp PIPE>;
            key-positions = <8 20>;
            layers = <0 2 3>;
        };

        c_equal {
            bindings = <&kp EQUAL>;
            key-positions = <3 16>;
            layers = <0 2 3>;
        };

        c_plus {
            bindings = <&kp PLUS>;
            key-positions = <19 8>;
            layers = <0 2 3>;
        };

        c_fsls {
            bindings = <&kp FSLH>;
            key-positions = <15 4>;
            layers = <0 2 3>;
        };

        c_bslsh {
            bindings = <&kp BSLH>;
            key-positions = <7 20>;
            layers = <0 2 3>;
        };

        c_lt {
            bindings = <&kp LT>;
            key-positions = <15 28>;
            layers = <0 2 3>;
        };

        c_gt {
            bindings = <&kp GT>;
            key-positions = <20 31>;
            layers = <0 2 3>;
        };

        c_prct {
            bindings = <&kp PRCNT>;
            key-positions = <4 17>;
            layers = <0 2 3>;
        };

        c_star {
            bindings = <&kp STAR>;
            key-positions = <7 18>;
            layers = <0 2 3>;
        };

        c_hash {
            bindings = <&kp HASH>;
            key-positions = <27 26>;
            layers = <0 2 3>;
        };

        c_at {
            bindings = <&kp AT>;
            key-positions = <32 33>;
            layers = <0 2 3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        qwerty {
            // .----------------------------------------------------------------------------.       .-------------------------------------------------------------------------------.
            // | ALT(SPACE) |    Q      |    W     |   E       |    R      |    T           |       |   Y            |    U            |    I      |    O     |     P    |    [     |
            // |------------+-----------+----------+-----------+-----------+----------------|       |----------------+-----------------+-----------+----------+----------+----------|
            // |      `     | LGUI / A  | LALT / S | LCTRL / D | NAV / F   |    G           |       |   H            |  NAV / J        | RCTRL / K | RALT / L | RGUI / ; |     '    |
            // |------------+-----------+----------+-----------+-----------+----------------|       |----------------+-----------------+-----------+----------+----------+----------|
            // | GUI(SPACE) |    Z      |    X     |   C       |    V      |     B          |       |       N        |    M            |    ,      |    .     |     /    |     ]    |
            // '-----------------------------------+-----------+-----------+----------------|       |----------------+-----------------+-----------+--------------------------------'
            //                                     |  ESC      | NUM / TAB | LSHIFT / SPACE |       | RSHIFT / ENTER | SYM / BACKSPACE | DELETE    |
            //                                     '-----------+-----------+----------------'       '----------------+-----------------+-----------'

            bindings = <
&none  &kp Q        &kp W        &kp E         &kp R         &kp T        &kp Y  &kp U         &kp I         &kp O        &kp P                &none
&none  &hrm LGUI A  &hrm LALT S  &hrm LCTRL D  &hrm LSHFT F  &kp G        &kp H  &hrm RSHFT J  &hrm RCTRL K  &hrm RALT L  &hrm RGUI SEMICOLON  &none
&none  &lt 5 Z      &kp X        &kp C         &kp V         &kp B        &kp N  &kp M         &kp COMMA     &kp DOT      &kp FSLH             &none
                                 &none         &mo 3         &kp SPACE    &mo 2  &la 1         &none
            >;
        };

        navigation {
            // .--------------------------------------------------------------.       .-----------------------------------------------------------------------------.
            // |       |       |       VOL- |      MUTE  |     VOL+   |       |       | PAGE_DOWN | WORKSPACE_PREV | WORKSPACE_NEXT | PAGE_UP |   INSERT    |       |
            // |-------+-------+------------+------------+------------+-------|       |-----------+----------------+----------------+---------+-------------+-------|
            // |       |  LGUI |    LALT    |      LCTRL |     LSHIFT |       |       |      LEFT |           DOWN |             UP |   RIGHT | PRINTSCREEN |       |
            // |-------+-------+------------+------------+------------+-------|       |-----------+----------------+----------------+---------+-------------+-------|
            // |       |       | PREV_TRACK | PLAY/PAUSE | NEXT_TRACK |       |       |      HOME |      PREV_WORD |      NEXT_WORD |     END |             |       |
            // '----------------------------+------------+------------+-------|       |-----------+----------------+----------------+-------------------------------'
            //                              |            |            |       |       |           |                |                |
            //                              '------------+------------+-------'       '-----------+----------------+----------------'

            bindings = <
&none  &none      &none      &kp PG_DN    &kp PG_UP    &none        &ctrl_tab       &kp LC(LG(LEFT))  &kp LC(LG(RIGHT))  &alt_tab   &kp INS          &none
&none  &osm LGUI  &osm LALT  &osm LCTRL   &osm LSHIFT  &none        &kp LEFT_ARROW  &kp DOWN          &kp UP             &kp RIGHT  &kp PRINTSCREEN  &none
&none  &kp LC(Z)  &kp LC(X)  &kp LC(INS)  &kp LS(INS)  &kp LC(Y)    &kp HOME        &kp LC(LEFT)      &kp LC(RIGHT)      &kp END    &none            &none
                             &none        &trans       &trans       &trans          &trans            &none
            >;
        };

        symbols {
            // .-----------------------------------------------.       .-----------------------------------------------.
            // |       |   ^   |   {   |   +   |   }   |   $   |       |       |   %   |   *   |   #   |   ~   |       |
            // |-------+-------+-------+-------+-------+-------|       |-------+-------+-------+-------+-------+-------|
            // |       |   `   |   [   |   =   |   ]   |   "   |       |  "|"  |   (   |   '   |   )   |   \   |       |
            // |-------+-------+-------+-------+-------+-------|       |-------+-------+-------+-------+-------+-------|
            // |       |   _   |   !   |   &   |   -   |   @   |       |       |   =>  |   <   |   >   |   ?   |       |
            // '-----------------------+-------+-------+-------|       |-------+-------+-------+-----------------------'
            //                         |       |       |       |       |       |       |       |
            //                         '-------+-------+-------'       '-------+-------+-------'

            bindings = <
&none  &none  &none  &none   &none   &none     &none   &none   &none   &none  &none  &none
&none  &none  &none  &none   &none   &none     &none   &none   &none   &none  &none  &none
&none  &none  &none  &none   &none   &none     &none   &none   &none   &none  &none  &none
                     &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        number_fn {
            // .-----------------------------------------------.       .-----------------------------------------------.
            // |       |  F10  |   F7  |   F8  |   F9  |   %   |       |   *   |   7   |   8   |   9   |   /   |       |
            // |-------+-------+-------+-------+-------+-------|       |-------+-------+-------+-------+-------+-------|
            // |       |  F11  |   F4  |   F5  |   F6  |   =   |       |   +   |   4   |   5   |   6   |   -   |       |
            // |-------+-------+-------+-------+-------+-------|       |-------+-------+-------+-------+-------+-------|
            // |       |  F12  |   F1  |   F2  |   F3  |       |       |   0   |   1   |   2   |   3   |   .   |       |
            // '-----------------------+-------+-------+-------|       |-------+-------+-------+-----------------------'
            //                         |       |       |       |       |       |       |       |
            //                         '-------+-------+-------'       '-------+-------+-------'

            bindings = <
&none  &kp F1        &kp F2        &kp F3         &kp F4          &kp F5     &kp F6   &kp F7              &kp F8         &kp F9        &kp F10              &none
&none  &hrm LGUI N1  &hrm LALT N2  &hrm LCTRL N3  &hrm LSHIFT N4  &kp N5     &kp N6   &hrm LEFT_SHIFT N7  &hrm LCTRL N8  &hrm LALT N9  &hrm LMETA NUMBER_0  &none
&none  &none         &none         &none          &none           &kp F11    &kp F12  &none               &kp COMMA      &kp DOT       &kp FSLH             &none
                                   &trans         &trans          &trans     &trans   &trans              &trans
            >;
        };

        adjust {
            // .-----------------------------------------------------------.       .-----------------------------------------------------.
            // |       |           |           |           |       |       |       | BT_CLR |       |       |       |       | BT_CLR_ALL |
            // |-------+-----------+-----------+-----------+-------+-------|       |--------+-------+-------+-------+-------+------------|
            // |       | RMB_CLICK | MMB_CLICK | LMB_CLICK |       |       |       |  BT3   | BT0   | BT1   | BT2   | BT4   |            |
            // |-------+-----------+-----------+-----------+-------+-------|       |--------+-------+-------+-------+-------+------------|
            // |       |           |           |           |       |       |       |        |       |       |       |       |            |
            // '-------------------------------+-----------+-------+-------|       |--------+-------+-------+----------------------------'
            //                                 |           |       |       |       |        |       |       |
            //                                 '-----------+-------+-------'       '--------+-------+-------'

            bindings = <
&bootloader  &kp C_BRI_DN  &kp C_VOL_DN  &kp C_MUTE  &kp C_VOL_UP  &kp C_BRI_UP    &bt BT_CLR    &none         &none         &none         &bt BT_CLR_ALL  &bootloader
&none        &kp C_PREV    &kp LEFT      &kp C_PP    &kp RIGHT     &kp C_NEXT      &bt BT_SEL 3  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 4    &none
&none        &none         &none         &none       &none         &none           &none         &none         &none         &none         &none           &none
                                         &trans      &trans        &trans          &trans        &trans        &trans
            >;
        };

        mouse {
            bindings = <
&none  &none  &none     &none      &none      &none        &none           &none           &none         &none            &none  &none
&none  &none  &kp LALT  &kp LCTRL  &kp LSHFT  &none        &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &none  &none
&none  &none  &none     &none      &none      &none        &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT  &none  &none
                        &mkp MCLK  &mkp RCLK  &mkp LCLK    &mkp LCLK       &mkp RCLK       &mkp MCLK
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        ns_adj {
            if-layers = <1 2>;
            then-layer = <4>;
        };

        nn_adj {
            if-layers = <1 3>;
            then-layer = <4>;
        };
    };
};
